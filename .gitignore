# Go Binaries and Build Artifacts
# Binaries for the current project (executable)
*.exe
*.dll
*.so
*.dylib
*.rpm
*.deb
*.apk
*.bin

# Binaries for other platforms
bin/

# Test binary, generated by `go test -c`
*.test

# Output of the go generate command
*.out

# Dependency caches
# Go module cache (usually in GOPATH/pkg/mod) - typically not committed
# but if you run 'go build' or 'go test' in a module, it might create these:
# Vendor directory (if you use `go mod vendor`) - usually committed if managing dependencies this way
# However, if you explicitly want to ignore it:
# vendor/

# Go build cache
.go/

# IDE/Editor Specific Files
# VS Code
.vscode/

# Intellij IDEA / GoLand
.idea/
*.iml

# Vim swap files
*.swp
*.swo

# Emacs backup files
*~
#*#

# OS Generated Files
.DS_Store
Thumbs.db

# Logs
logs
*.log

# Environment variables
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# Optional: Coverage files (if generated directly in project)
coverage/
*.lcov
.nyc_output/ # Often from JS, but common coverage output

# Optional: Data files generated by your scraper
# If your scraper writes output to a file, you might want to ignore it.
# Example:
# output.json
# scraped_data.csv

# Diagnostic reports (from various tools, adjust as needed)
report.*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Build/Release output
build/
dist/